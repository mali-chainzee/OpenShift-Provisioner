---
# tasks file for pre-install
- block:
  - name: Make directory for OCP install
    file:
      path: "{{ ocp4_dir }}"
      state: directory
    become: false
  
  - name: Check if ocp-install directory exists
    stat:
      path: "{{ ocp4_dir }}"
    register: stat_result
   
  - debug:
      var: stat_result

  - name: Make install-dir for openshift-install
    file:
      path: "{{ ocp4_install_dir }}"
      state: directory
    become: false

  - name: Download OpenShift installer 
    unarchive:
      src: "{{ ocp4_installer_url }}"
      dest: "{{ ocp4_dir }}"
      remote_src: yes
      creates: "{{ ocp4_dir }}/openshift-install"

  - name: Set permission for openshift-install
    file:
      path: "{{ ocp4_dir }}/openshift-install"
      owner: "{{ ansible_ssh_user }}"
      mode: u=x

  - name: create ssh keypair for ocp4 master access
    shell: ssh-keygen -t rsa -b 2048 -N '' -C 'developer' -f ~/.ssh/id_rsa
    args:
      creates: ~/.ssh/id_rsa

  - name: slurp ssh pubkey
    slurp:
      src: ~/.ssh/id_rsa.pub
    register: bastion_pubkey

  - name: Create floating ip for load balancer API
    shell: openstack floating ip create {{ external_network }} --description "API {{ cluster_domain_name }}" --tag {{ cluster_name }} --os-cloud={{ os_cloud }} -f value -c floating_ip_address
    register: lb_floating_ip
  
  - name: Create floating ip for Ingress
    shell: openstack floating ip create {{ external_network }} --description "Ingress {{ cluster_domain_name }}" --tag {{ cluster_name }} --os-cloud={{ os_cloud }} -f value -c floating_ip_address
    register: ingress_floating_ip

  - set_fact:
      lb_floating_ip={{ lb_floating_ip.stdout }}
      ingress_floating_ip={{ ingress_floating_ip.stdout }}

  - name: Generate install-config.yaml 
    template:
      dest: "{{ ocp4_install_dir }}/{{ item }}"
      src: install-config.yaml.j2
    with_items:
      - install-config.yaml
      - install-config.copy.yaml

  - name: generate /etc/hosts content
    set_fact:
      cluster_urls: |
        {{ lb_floating_ip }}  api.{{ cluster_domain_name }}
        {{ ingress_floating_ip }}  console-openshift-console.apps.{{ cluster_domain_name }}
        {{ ingress_floating_ip }}  integrated-oauth-server-openshift-authentication.apps.{{ cluster_domain_name }}
        {{ ingress_floating_ip }}  oauth-openshift.apps.{{ cluster_domain_name }}
        {{ ingress_floating_ip }}  prometheus-k8s-openshift-monitoring.apps.{{ cluster_domain_name }}
        {{ ingress_floating_ip }}  grafana-openshift-monitoring.apps.{{ cluster_domain_name }}

  - name: create local /etc/hosts entry for cluster
    copy:
      dest: /etc/hosts
      content: "{{ cluster_urls }}"
    become: true

  - name: Run openshift-install
    shell: "./openshift-install create cluster --dir={{ ocp4_install_dir }} --log-level=debug"
    args:
      chdir: "{{ ocp4_dir }}"
      creates: "{{ ocp4_dir }}/metadata.json"
    register: installer_log

  - name: Error message
    debug:
      msg: "{{ installer_log.stdout }}"
    when: installer_log

  tags: install

- block: 
  #can remove these after non-user ran openshift-install
  - name: set permissions for kubeconfig
    file:
      path: "{{ ocp4_dir }}"
      recurse: yes
      owner: "{{ ansible_ssh_user }}"
      mode: o+rw


  - name: Fetch kubadmin password
    shell: cat {{ ocp4_install_dir }}/auth/kubeadmin-password
    register: password

  - name: Fetch cluster id
    shell: cat {{ ocp4_install_dir }}/metadata.json
    register: cluster_info

  - set_fact:
      cluster_id: "{{ cluster_info.stdout | from_json | json_query('infraID')}}"

  - name: Attach IP to ingress port
    shell: openstack floating ip set --os-cloud {{ os_cloud }} --port {{ cluster_id }}-ingress-port 432597cf-09e5-4594-96c4-542bcf6b50ee
  
  - name: Cluster Info
    debug:
      msg: [
        "To access the cluster on your own machine, copy these to your /etc/hosts",
     #   "{{ cluster_urls }}",
        "",
        "Access web console at https://console-openshift-console.apps.{{ cluster_domain_name }}", 
        "Username: kubeadmin",
        "Password: {{ password.stdout }}"
      ]
    check_mode: yes

# fix this, put oc in /home/bin instead
  - name: Make bin dir for user
    file:
      path: ~/bin
      state: directory

  - name: Download OpenShift CLI
    unarchive:
      src: "{{ ocp4_cli_url }}"
      dest: "~/bin/"
      remote_src: yes
      creates: ~/bin/oc

  - name: Create .~/kube dir
    file: 
      path: ~/.kube
      state: directory

  - name: Move kubeconfig
    command: mv {{ ocp4_install_dir }}/auth/kubeconfig ~/.kube/config

  - name: set permissions for kubeconfig
    file:
      path: "~/.kube/config"
      owner: "{{ ansible_ssh_user }}"
      mode: o+rw


  tags: config